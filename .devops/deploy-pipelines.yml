# only manual
trigger: none
pr: none

parameters:
  - name: 'DEV'
    displayName: 'Run on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT'
    displayName: 'Run on UAT environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'PROD'
    displayName: 'Run on PROD environment'
    type: boolean
    default: True
    values:
      - False
      - True

variables:
  TIME_OUT: 5

pool:
  vmImage: 'ubuntu-20.04'

resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: INFRA-391-azuredevops-create-iac-pipelines
      endpoint: 'azure-devops-github-ro'

stages:
  # DEV
  - stage: plan_DEV
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.DEV}}, true))
    pool:
      name: usrreg-dev-linux
    jobs:
      - job: plan_pillar
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: DEV-SERVICE-CONN
              ENVIRONMENT: dev
              WORKINGDIR: 'src/pillar'

      - job: plan_core
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: DEV-SERVICE-CONN
              ENVIRONMENT: dev
              WORKINGDIR: 'src/core'

  - stage: apply_DEV
    dependsOn: [plan_DEV]
    condition: and(succeeded(), eq(${{parameters.DEV}}, true))
    pool:
      name: usrreg-dev-linux
    jobs:
      - job: wait_for_validation
        displayName: Wait for external validation
        timeoutInMinutes: 1440 # job times out in 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out in 1 day
          inputs:
            instructions: 'Do you want to continue with the apply?'
            onTimeout: 'reject'
      - deployment: apply_pillar
        continueOnError: false
        # dependsOn: init
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 1. Install terraform
                - template: templates/terraform-setup/template.yaml@terraform
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: DEV-SERVICE-CONN
                    ENVIRONMENT: dev
                    WORKINGDIR: 'src/pillar'
      - deployment: apply_core
        continueOnError: false
        # dependsOn: init
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 1. Install terraform
                - template: templates/terraform-setup/template.yaml@terraform
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: DEV-SERVICE-CONN
                    ENVIRONMENT: dev
                    WORKINGDIR: 'src/core'

  # UAT
  - stage: plan_UAT
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: usrreg-uat-linux
    jobs:
      - job: plan_pillar
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: UAT-SERVICE-CONN
              ENVIRONMENT: uat
              WORKINGDIR: 'src/pillar'
      - job: plan_core
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: UAT-SERVICE-CONN
              ENVIRONMENT: uat
              WORKINGDIR: 'src/core'

  - stage: apply_UAT
    dependsOn: [plan_UAT]
    condition: and(succeeded(), eq(${{parameters.UAT}}, true))
    pool:
      name: usrreg-uat-linux
    jobs:
      - job: wait_for_validation
        displayName: Wait for external validation
        timeoutInMinutes: 1440 # job times out in 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out in 1 day
          inputs:
            instructions: 'Do you want to continue with the apply?'
            onTimeout: 'reject'
      - deployment: apply_pillar
        continueOnError: false
        # dependsOn: init
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 1. Install terraform
                - template: templates/terraform-setup/template.yaml@terraform
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: UAT-SERVICE-CONN
                    ENVIRONMENT: uat
                    WORKINGDIR: 'src/pillar'
      - deployment: apply_core
        continueOnError: false
        # dependsOn: init
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 1. Install terraform
                - template: templates/terraform-setup/template.yaml@terraform
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: UAT-SERVICE-CONN
                    ENVIRONMENT: uat
                    WORKINGDIR: 'src/core'

  # PROD
  - stage: plan_PROD
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.PROD}}, true))
    pool:
      name: usrreg-prod-linux
    jobs:
      - job: plan_pillar
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: PROD-SERVICE-CONN
              ENVIRONMENT: prod
              WORKINGDIR: 'src/pillar'
      - job: plan_core
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: PROD-SERVICE-CONN
              ENVIRONMENT: prod
              WORKINGDIR: 'src/core'

  - stage: apply_PROD
    dependsOn: [plan_PROD]
    condition: and(succeeded(), eq(${{parameters.PROD}}, true))
    pool:
      name: usrreg-prod-linux
    jobs:
      - job: wait_for_validation
        displayName: Wait for external validation
        timeoutInMinutes: 1440 # job times out in 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out in 1 day
          inputs:
            instructions: 'Do you want to continue with the apply?'
            onTimeout: 'reject'
      - deployment: apply_pillar
        continueOnError: false
        # dependsOn: init
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 1. Install terraform
                - template: templates/terraform-setup/template.yaml@terraform
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: PROD-SERVICE-CONN
                    ENVIRONMENT: prod
                    WORKINGDIR: 'src/pillar'
      - deployment: apply_core
        continueOnError: false
        # dependsOn: init
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 1. Install terraform
                - template: templates/terraform-setup/template.yaml@terraform
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: PROD-SERVICE-CONN
                    ENVIRONMENT: prod
                    WORKINGDIR: 'src/core'
